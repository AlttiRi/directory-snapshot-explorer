{"version":3,"file":"index.js","sources":["node-modules:///vite/modulepreload-polyfill","source-maps:///util.js","source-maps:///core/entries.js","source-maps:///core/debug.js","source-maps:///core/entry.js","source-maps:///core/search.js","source-maps:///core/scan-parser.js","source-maps:///core/folders.js","source-maps:///components/AddressBar_Base.vue","source-maps:///components/AddressBar_Folder.vue","source-maps:///components/FileSelect.vue","source-maps:///components/Row.vue","source-maps:///components/Content.vue","source-maps:///components/Main.vue","source-maps:///main.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","export const setImmediate = globalThis.setImmediate || /*#__PURE__*/ (function() {\n    const {port1, port2} = new MessageChannel();\n    const queue = [];\n\n    port1.onmessage = function() {\n        const callback = queue.shift();\n        callback();\n    };\n\n    return function(callback) {\n        port2.postMessage(null);\n        queue.push(callback);\n    };\n})();\n\nexport function sleep(ms) {\n    if (ms === undefined) {\n        return new Promise(resolve => setImmediate(resolve));\n    }\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport const shuffle = () => Math.random() >= 0.5 ? -1 : 1;\n\nconst videoExtensions = [\"mp4\", \"webm\", \"mkv\", \"avi\"];\nexport function isVideo(filename) {\n    const {ext} = filename.match(/(?<ext>[^.]+)$/).groups;\n    return videoExtensions.includes(ext);\n}\nconst imageExtensions = [\"png\", \"jpg\", \"jpeg\", \"gif\", \"tiff\", \"webp\"];\nexport function isImage(filename) {\n    const {ext} = filename.match(/(?<ext>[^.]+)$/).groups;\n    return imageExtensions.includes(ext);\n}\n\nexport function debounce(runnable, ms = 50) {\n    let timerId;\n    return function() {\n        // console.log({timerId});\n        if (timerId) {\n            clearTimeout(timerId);\n        }\n        timerId = setTimeout(() => {\n            runnable.apply(this, arguments);\n            timerId = null;\n        }, ms);\n    }\n}\n\n// \"Sun, 10 Jan 2021 22:22:22 GMT\" -> \"2021.01.10\"\nexport function dateToDayDateString(dateValue, utc = true) {\n    const _date = new Date(dateValue);\n    function pad(str) {\n        return str.toString().padStart(2, \"0\");\n    }\n    const _utc = utc ? \"UTC\" : \"\";\n    const year  = _date[`get${_utc}FullYear`]();\n    const month = _date[`get${_utc}Month`]() + 1;\n    const date  = _date[`get${_utc}Date`]();\n\n    // if server error (or missed)\n    if (Number(_date) === 0) {\n        console.warn(\"date is 1970.01.01\");\n        return \"\";\n    }\n\n    return year + \".\" + pad(month) + \".\" + pad(date);\n}\n\nexport function structuredClone(object) {\n    return new Promise(resolve => {\n        const {port1, port2} = new MessageChannel();\n        port1.onmessage = function(message) {\n            resolve(message.data);\n        };\n        port2.postMessage(object);\n    });\n}\n\nexport function appendScript(src, integrity) {\n    return new Promise(resolve => {\n        const script = document.createElement(\"script\");\n        script.onload = resolve;\n        script.src = src;\n        script.setAttribute(\"async\", \"\");\n        if (integrity) {\n            script.integrity = integrity;\n            script.setAttribute(\"crossorigin\", \"anonymous\");\n        }\n        document.querySelector(\"body\").append(script);\n    });\n}\n","import {computed, ref} from \"vue\";\nimport {search, searchResult} from \"./search.js\";\nimport {openedFolder} from \"./folders.js\";\n\n\nexport const sort = ref(true);\n\nconst {compare} = new Intl.Collator(undefined, {\n    numeric: true,\n    sensitivity: \"accent\",\n});\nexport function comparator(pre, cur) {\n    if (sort.value) {\n        return compare(pre.name, cur.name);\n    }\n    return 0;\n}\n\n// grouped by type\nexport const entries = computed(() => [\n    ...openedFolder.value.folders.sort(comparator),\n    ...openedFolder.value.files.sort(comparator),\n    ...openedFolder.value.symlinks.sort(comparator),\n    ...openedFolder.value.fifos.sort(comparator),\n    ...openedFolder.value.charDevs.sort(comparator),\n    ...openedFolder.value.blockDevs.sort(comparator),\n    ...openedFolder.value.sockets.sort(comparator),\n]);\n\n\n/** @type {number} */\nconst limit = 1000;\n\n/** @type {import(\"vue\").ComputedRef<SimpleEntry[]>} */\nexport const list = computed(() => {\n    if (search.value.length) {\n        return searchResult.value;\n    }\n    return entries.value;\n});\n/** @type {import(\"vue\").ComputedRef<SimpleEntry[]>} */\nexport const listLimited = computed(() => {\n    return list.value.slice(0, limit);\n});\n/** @type {import(\"vue\").ComputedRef<Number>} */\nexport const count = computed(() => {\n    if (searchResult.value.length > limit) {\n        return searchResult.value.length;\n    }\n    return list.value.length;\n});\n","import {ref} from \"vue\";\n\nexport const debugMessage = ref(\"\");\nexport function addMessage(message) {\n    debugMessage.value = message;\n}\nexport function appendMessage(message) {\n    debugMessage.value += message;\n}\n","/** @type {ScanEntryType[]} */\nimport {sleep} from \"../util.js\";\n\nexport const entryTypes = [\"folder\", \"file\", \"symlink\", \"fifo\", \"charDev\", \"blockDev\", \"socket\"];\n\nexport class SimpleEntry {\n    // [Symbol.toStringTag] = \"SimpleEntry\"; // Disables reactivity, BTW.\n    /**\n     * @param {SerializableScanEntry} entry\n     * @param {SimpleEntry|null} parent\n     */\n    constructor(entry, parent) {\n        /** @type {String} */\n        this.name = entry.name;\n        /** @type {SimpleEntry|null} */\n        this.parent = parent;\n        /** @type {ScanEntryType} */\n        this.type = entry.type;\n\n        if (entry.size) {\n            /** @type {Number|undefined} */\n            this._size = entry.size;\n        }\n        if (entry.mtime) {\n            /** @type {Number|undefined} */\n            this.mtime = entry.mtime;\n        }\n        if (entry.btime) {\n            /** @type {Number|undefined} */\n            this.btime = entry.btime;\n        }\n\n        if (entry.errors) {\n            /** @type {ScanError[]|undefined} */\n            this.errors = entry.errors;\n        }\n\n        if (entry.pathTo) {\n            /** @type {String|undefined} */\n            this.pathTo = entry.pathTo;\n        }\n        if (entry.content) {\n            /** @type {String|undefined} */\n            this.content = entry.content;\n        }\n    }\n    /** @param {SimpleEntry} entry */\n    addChild(entry) {\n        if (!this.children) {\n            /** @type {SimpleEntry[]|undefined} */\n            this.children = [];\n        }\n        this.children.push(entry);\n    }\n    /** @param {SimpleEntry[]} entries\n     *  @param {Number} total */\n    addHardlinks(entries, total) {\n        /** @type {SimpleEntry[]|undefined} */\n        this.hardlinks = entries;\n        /** @type {Number|undefined} */\n        this.hardlinksTotal = total;\n    }\n\n    get size() {\n        if (this.type === \"folder\") {\n            return -0; // todo\n        }\n        return this._size || 0;\n    }\n\n    /** @return {SimpleEntry[]} */\n    get folders() {\n        return this.children?.filter(e => e.type === \"folder\") || [];\n    }\n    /** @return {SimpleEntry[]} */\n    get files() {\n        return this.children?.filter(e => e.type === \"file\") || [];\n    }\n    /** @return {SimpleEntry[]} */\n    get symlinks() {\n        return this.children?.filter(e => e.type === \"symlink\") || [];\n    }\n\n    /** @return {SimpleEntry[]} */\n    get fifos() {\n        return this.children?.filter(e => e.type === \"fifo\") || [];\n    }\n    /** @return {SimpleEntry[]} */\n    get charDevs() {\n        return this.children?.filter(e => e.type === \"charDev\") || [];\n    }\n    /** @return {SimpleEntry[]} */\n    get blockDevs() {\n        return this.children?.filter(e => e.type === \"blockDev\") || [];\n    }\n    /** @return {SimpleEntry[]} */\n    get sockets() {\n        return this.children?.filter(e => e.type === \"socket\") || [];\n    }\n\n    /** @return {Boolean} */\n    get isEmpty() {\n        return !Boolean(this.children?.length);\n    }\n    /** @return {Boolean} */\n    get hasErrors() {\n        return Boolean(this.errors?.length);\n    }\n    /** @return {SimpleEntry} */\n    get root() {\n        if (!this.parent) {\n            return this;\n        }\n        return this.parent.root;\n    }\n    /** @return {SimpleEntry[]} */\n    get path() {\n        if (!this.parent) {\n            return [this];\n        }\n        return [...this.parent.path, this];\n    }\n}\n\n/**\n * @param {SerializableScanEntry[]} sEntries\n * @return {SimpleEntry}\n * */\nexport async function parseFlatScan(sEntries) {\n    /** @type {Map<Number, SimpleEntry>} */\n    const map = new Map();\n    /** @type {Map<String, SimpleEntry[]>} */\n    const hidMap = new Map();\n\n    const rootId = 0;\n    for (const entry of sEntries) {\n        /** @type {SimpleEntry|null}*/\n        const parent = map.get(entry.pid) ?? null;\n        const simpleEntry = new SimpleEntry(entry, parent);\n        if (entry.type === \"folder\") {\n            map.set(entry.id, simpleEntry);\n        }\n        parent?.addChild(simpleEntry);\n        if (entry.hid) {\n            const array = hidMap.get(entry.hid) || [];\n            hidMap.set(entry.hid, [...array, simpleEntry]);\n        }\n    }\n\n    console.log(\"[hidMap]:\", hidMap);\n    console.time(\"hidMap\");\n    processHIDMapAsync(hidMap).then(() => console.timeEnd(\"hidMap\"));\n\n    return map.get(rootId);\n}\n\nasync function processHIDMapAsync(hidMap) {\n    let i = 0;\n    let time = 0; // `0` to do `sleep` on the first iteration\n\n    for (const [hid, simpleEntries] of hidMap.entries()) {\n        if (!(i++ % 1000)) {\n            const timeNow = Date.now();\n            if (timeNow - time > 15) {\n                time = timeNow;\n                await sleep();\n            }\n        }\n\n        /** @type {Number}*/\n        const totalLinks = Number(hid.split(\":\")[1]);\n        simpleEntries.forEach(e => {\n            e.addHardlinks(simpleEntries, totalLinks);\n        });\n    }\n}\n\n/** @type {SimpleEntry} */\nexport const folderDummy = new SimpleEntry({\n    type: \"folder\",\n    name: \"\",\n    pid: null,\n}, null);\n","import {isReactive, markRaw, ref, toRaw, watch} from \"vue\";\nimport {debounce, sleep} from \"../util.js\";\nimport {openedFolder} from \"./folders.js\";\nimport {comparator} from \"./entries.js\";\nimport * as debug from \"./debug.js\";\nimport {entryTypes} from \"./entry.js\";\n\n/** @type {import(\"vue\").Ref<string>} */\nexport const search = ref(\"\"); // [v-model]\nexport function clearSearch() {\n    search.value = \"\";\n}\n\n/** @type {import(\"vue\").Ref<SimpleEntry[]>} */\nexport const searchResult = ref([]);\nfunction clearSearchResult() {\n    setSearchResult([]);\n}\n/** * @param {SimpleEntry[]} result */\nfunction setSearchResult(result) {\n    searchResult.value = markRaw(result);\n\n    console.log(\"globalThis.search:\", globalThis.search = result);\n    Object.defineProperty(globalThis.search, \"download\", {\n        get() {\n            console.log(\"download\"); // todo\n        }\n    });\n}\n\n//todo search by type\n// /type:folder/\n//todo check linked list perf for large search\nconst performSearchDebounced = debounce(performSearch, 300);\nasync function performSearch() {\n    const folder = openedFolder.value;\n    const request = search.value;\n\n    // Do unProxy. Up to x40 in comparison with default reactive ref.\n    const folderRaw = isReactive(folder) ? toRaw(folder) : folder;\n\n    const time1 = performance.now();\n    const result = await searcher(folderRaw, request);\n    if (!result) {\n        return;\n    }\n    const searchTime = performance.now() - time1;\n    debug.addMessage(`Search time: ${searchTime.toFixed(2)} ms; `);\n    await sleep();\n\n    const time2 = performance.now();\n    const sortedResult = result.sort(comparator);\n    const sortTime = performance.now() - time2;\n    debug.appendMessage(`Sort time: ${sortTime.toFixed(2)} ms; `);\n    await sleep();\n\n    setSearchResult(sortedResult);\n    debug.appendMessage(`${result.length} items; search: ${request}`);\n}\n\n/**\n * @param {SimpleEntry} folder\n * @param {string} search\n * @return {Promise<SimpleEntry[]|false>}\n */\nasync function searcher(folder, search) {\n    if (search.startsWith(\"/\")) {\n        const {type, word} = search.match(/\\/type:(?<type>[^\\/]+)\\/?(?<word>[^\\/]*)/)?.groups || {};\n        if (type) {\n            console.log({type, word});\n            if (entryTypes.includes(type)) {\n                return findAll(folder, (entry) => {\n                    return entry.type === type && entry.name.includes(word);\n                });\n            }\n        }\n    } else {\n        return findAll(folder, (entry) => {\n            return entry.name.includes(search);\n        });\n    }\n    return false;\n}\n\nwatch(search, async (newValue, oldValue) => {\n    const isEmptyString = !newValue;\n    if (isEmptyString) {\n        clearSearchResult();\n        return;\n    }\n    // In order to \"no debounce by paste event\"\n    if (newValue.length - oldValue.length > 1) {\n        await performSearch();\n    } else {\n        await performSearchDebounced();\n    }\n});\n\n/**\n * @param {SimpleEntry} folder\n * @param {function(SimpleEntry)} predicate\n * @return {Promise<SimpleEntry[]>}\n */\nasync function findAll(folder, predicate) {\n    let res = [];\n    let time = Date.now();\n    for (const entries of listAllEntries(folder)) {\n        const curTime = Date.now();\n        if (curTime - time > 15) {\n            time = curTime;\n            await sleep();\n        }\n        for (const entry of entries) {\n            if (predicate(entry)) {\n                res.push(entry);\n            }\n        }\n    }\n    return res;\n}\n\n/**\n * List all entries by parts.\n * @param {SimpleEntry} folder\n * @return {Generator<SimpleEntry[]>}\n */\nfunction *listAllEntries(folder) {\n    const partSize = 1000;\n    /** @type {SimpleEntry[]} */\n    let list = [];\n    /** @param {SimpleEntry} folderEntry */\n    function *takePart(folderEntry) {\n        for (const entry of (folderEntry.children || [])) {\n            if (entry.type === \"folder\") {\n                yield *takePart(entry);\n            }\n            list.push(entry);\n            if (list.length === partSize) {\n                yield list;\n                list = [];\n            }\n        }\n    }\n    yield *takePart(folder);\n    yield list;\n}\n","import {parseFlatScan} from \"./entry.js\";\nimport {appendScript} from \"../util.js\";\n\nlet pakoIsLoaded = false;\nasync function loadPako() {\n    if (!pakoIsLoaded) {\n        const src = \"https://cdn.jsdelivr.net/npm/pako@2.0.4/dist/pako_inflate.min.js\";\n        const integrity = \"sha256-ZIKs3+RZEULSy0dR6c/mke8V9unZm9vuh05TqvtMdGU=\";\n        await appendScript(src, integrity);\n        pakoIsLoaded = true;\n        console.log(\"pako is loaded\");\n    }\n}\n\n/**\n * @param {Response|Blob} input\n * @return {Promise<*>}\n */\nasync function unGZipJSON(input) {\n    await loadPako();\n\n    const inflator = new pako.Inflate();\n    const ab = await input.arrayBuffer();\n    inflator.push(ab);\n    if (inflator.err) {\n        console.error(inflator.msg);\n    }\n    return JSON.parse(new TextDecoder().decode(inflator.result));\n}\n\n/**\n * @param {Blob|Response} input\n * @return {Promise<{meta: ScanMeta, root: SimpleEntry}>}\n */\nexport async function parseScan(input) {\n    /**\n     * @see FlatScanResult\n     * @type {Object[]} flatScan */\n    let flatScan;\n\n    if (input instanceof Response) {\n        /** @type {Response} */\n        const response = input;\n\n        // If \"content-type\" is \"application/json\" or \"application/json; charset=utf-8\"\n        // and \"content-encoding\" is \"gzip\"\n        // the browser will unGZip it itself.\n        /* const contentEncoding = response.headers.get(\"content-encoding\"); */\n        const contentType = response.headers.get(\"content-type\");\n        if (isGZip(contentType)/* && contentEncoding === null */) {\n            flatScan = await unGZipJSON(response);\n        } else if (isJSON(contentType)) {\n            flatScan = await response.json();\n        }\n    } else if (input instanceof Blob) {\n        /** @type {Blob} */\n        const blob = input;\n\n        if (isGZip(blob.type)) {\n            flatScan = await unGZipJSON(blob);\n        } else if (isJSON(blob.type)) {\n            flatScan = JSON.parse(await blob.text());\n        }\n    }\n\n    /** @type {ScanMeta} */\n    const meta = flatScan[0];\n    /** @type {SerializableScanEntry[]} */\n    const sEntries = flatScan.slice(1);\n\n\n    console.time(\"parseEntries\");\n    /** @type {SimpleEntry} */\n    const root = await parseFlatScan(sEntries);\n    console.timeEnd(\"parseEntries\");\n\n    return {meta, root};\n}\n\n/**\n * \"application/x-gzip\"\n * \"application/gzip\"\n * @param contentType\n * @return {Boolean}\n */\nfunction isGZip(contentType) {\n    return Boolean(contentType.match(/^application\\/.*?gzip/));\n}\n/**\n * \"application/json\"\n * \"application/json; charset=utf-8\"\n * @param contentType\n * @return {Boolean}\n */\nfunction isJSON(contentType) {\n    return Boolean(contentType.match(/^application\\/.*?json/));\n}\n","import {computed, markRaw, ref, unref, watch} from \"vue\";\nimport {clearSearch} from \"./search.js\";\nimport {folderDummy, parseFlatScan} from \"./entry.js\";\nimport {dateToDayDateString} from \"../util.js\";\nimport {addMessage} from \"./debug.js\";\nimport {parseScan} from \"./scan-parser.js\";\n\n\n/** @type {import(\"vue\").Ref<ScanMeta>} */\nexport const meta = ref(null);\n/** @type {import(\"vue\").Ref<SimpleEntry>} */\nconst root = ref(null);\n\n/**\n * @param {Blob|Response} input\n * @return {Promise<void>}\n */\nexport async function setScan(input) {\n    const {\n        meta: scanMeta,\n        root: rootEntry\n    } = await parseScan(input);\n\n    meta.value = markRaw(scanMeta);\n    root.value = markRaw(rootEntry);\n    globalThis.json = rootEntry;\n\n    openFolder(rootEntry);\n    clearSearch();\n}\n\n/** @type {import(\"vue\").ComputedRef<string>} */\nexport const separator = computed(() => {\n    return meta.value?.separator || \"/\";\n});\n/** @type {import(\"vue\").ComputedRef<string[]>} */\nexport const scanRootPath = computed(() => {\n    return meta.value?.path || [];\n});\n\n\n/** @type {import(\"vue\").Ref<SimpleEntry>} */\nexport const openedFolder = ref(folderDummy);\n/** @type {import(\"vue\").ComputedRef<SimpleEntry[]>} */\nexport const openedFolders = computed(() => {\n    return openedFolder.value.path;\n});\n\n/** @param {SimpleEntry} entry */\nexport function openFolder(entry) {\n    clearSearch();\n    openedFolder.value = markRaw(unref(entry));\n}\nexport function goBack() {\n    if (openedFolder.value.parent) {\n        openFolder(openedFolder.value.parent);\n    }\n}\n/** @type {import(\"vue\").ComputedRef<Boolean>} */\nexport const empty = computed(() => root.value && openedFolder.value.isEmpty);\n\n\nwatch(meta, async (newValue, oldValue) => {\n    console.log(\"[meta]:\", meta.value);\n    const {files, folders, symlinks, errors, total, scanDate} = meta.value;\n    if (meta.value.scanDate) {\n        addMessage(\n            `files: \"${files}\" folders: \"${folders}\", symlinks: \"${symlinks}\", ` +\n            `errors: \"${errors}\", total: \"${total}\", scanDate: \"${dateToDayDateString(scanDate)}\"`\n        );\n    }\n});\n","<template>\n  <span class=\"scanPath\">\n    <span class=\"parts\" @click=\"goToRoot\" :title=\"title\">\n      <span class=\"part\"       >{{part1}}</span>\n      <span class=\"part spaced\">{{part2}}</span>\n    </span>\n    <span class=\"spaced separator\" v-if=\"showSep\">{{separator}}</span>\n  </span>\n</template>\n\n<script setup>\n//todo title\nimport {computed} from \"vue\";\nimport {scanRootPath, openedFolders, separator, openedFolder, openFolder, meta} from \"../core/folders.js\";\nimport {dateToDayDateString} from \"../util.js\";\n\nconst title = computed(() => {\n  if (!meta.value) {\n    return;\n  }\n\n  const {\n      files, folders, symlinks,\n      charDevs, blockDevs, fifos, sockets,\n      total,\n      platform, scanDate\n  } = meta.value;\n\n  function doString(o) {\n    function pad(str) {\n      const count = 3 - Math.trunc((str.length/4));\n      return str + \"\\t\".repeat(count);\n    }\n    return Object.entries(o)\n        .map(([k, v]) => pad(k) + \": \" + v)\n        .join(\"\\n\");\n  }\n  const commonFiles = doString({files, folders, symlinks});\n  const unusualFiles = doString({charDevs, blockDevs, fifos, sockets});\n  const additional = doString({total, platform, scanDate: dateToDayDateString(scanDate)});\n\n  let result;\n  if (platform !== \"win32\") {\n    result = [commonFiles, unusualFiles, additional].join(\"\\n\");\n  } else {\n    result = [commonFiles, additional].join(\"\\n\");\n  }\n  console.log(result);\n  return result;\n});\n\nconst root = computed(() => {\n  const scanPath = [...scanRootPath.value, openedFolder.value.root.name];\n  const str = scanPath.join(separator.value);\n  if (str.startsWith(\"//\")) { // for unix\n    return str.slice(1);\n  }\n  return str;\n});\nconst part1 = computed(() => {\n  return [...root.value].slice(0, -1).join(\"\"); // if ends with surrogate pair\n});\nconst part2 = computed(() => {\n  return [...root.value].slice(-1).join(\"\");\n});\nconst showSep = computed(() => {\n  return (openedFolders.value.length - 1) && root.value !== \"/\";\n});\n\nfunction goToRoot() {\n  openFolder(openedFolder.value.root);\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.scanPath {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  .parts {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    white-space: pre; /* to display tailing spaces */\n\n    cursor: pointer;\n    box-sizing: border-box;\n    border-bottom: transparent solid 1px;\n    &:hover {\n      background-color: var(--blue-2);\n      border-bottom: 1px solid var(--blue-1);\n    }\n    &:active {\n      background: var(--blue-3);\n    }\n    .part {\n      display: contents; // for correct selection by double click\n    }\n  }\n  .spaced {\n    letter-spacing: 2px;\n  }\n}\n</style>\n","<template>\n  <span class=\"opened-folder\">\n    <span class=\"parts\" @click=\"onClick\">\n      <span class=\"part\"       >{{part1}}</span>\n      <span class=\"part spaced\">{{part2}}</span>\n    </span>\n    <span class=\"separator spaced\" v-if=\"!isLast\">{{separator}}</span>\n  </span>\n</template>\n\n<script setup>\nimport {computed, toRefs} from \"vue\";\nimport {openFolder, separator} from \"../core/folders.js\";\n\nconst props = defineProps([\"index\", \"count\", \"entry\"]);\nconst {index, count, entry} = toRefs(props);\n\nconst isLast = computed(() => {\n  return index.value + 1 === count.value;\n});\nconst part1 = computed(() => {\n  return [...entry.value.name].slice(0, -1).join(\"\"); // if ends with surrogate pair\n});\nconst part2 = computed(() => {\n  return [...entry.value.name].slice(-1).join(\"\");\n});\n\nfunction onClick() {\n  openFolder(entry.value);\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.opened-folder {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  .parts {\n    height: 100%;\n    display: flex;\n    align-items: center;\n\n    width: 100%;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    white-space: pre; /* to display tailing spaces */\n\n    cursor: pointer;\n    box-sizing: border-box;\n    border-bottom: transparent solid 1px;\n    &:hover {\n      background-color: var(--blue-2);\n      border-bottom: 1px solid var(--blue-1);\n    }\n    &:active {\n      background: var(--blue-3);\n    }\n    .part { // to use with max-width limitation // not works with  `display: contents;`\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: pre;\n    }\n    .part {\n      display: contents; // for correct selection by double click\n    }\n  }\n  .spaced {\n    letter-spacing: 2px;\n  }\n}\n</style>\n","<template>\n  <div class=\"file-select\">\n    <label>\n      Select file\n      <input type=\"file\" accept=\"application/json,application/gzip\" @change=\"onChange\">\n    </label>\n    <hr>\n  </div>\n</template>\n\n<script setup>\nimport {setScan} from \"../core/folders.js\";\n\nfunction onChange(event) {\n  /** @type {File} */\n  const file = event.target.files[0];\n  return setScan(file);\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.file-select label {\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n}\ninput {\n  display: none;\n}\n</style>\n","<template>\n  <tr class=\"row\"\n      @click=\"onClick\"\n      @mousedown=\"onMousedown\"\n      :title=\"title\"\n      :class=\"{error}\"\n  >\n      <td class=\"icon\">{{icon}}</td>\n      <td class=\"name\">{{entry.name}}</td>\n<!--      <td class=\"type\">{{entry.type}}</td>-->\n  </tr>\n</template>\n\n<script setup>\nimport {toRefs, computed} from \"vue\";\nimport {meta, openFolder, separator} from \"../core/folders.js\";\nimport {isImage, isVideo} from \"../util.js\";\n\nconst props = defineProps([\"entry\"]);\n\n/** @type {import(\"vue\").Ref<SimpleEntry>} */\nconst entry = toRefs(props).entry;\n\n/** @type {import(\"vue\").Ref<Boolean>} */\nconst error = computed(() => {\n  return entry.value.hasErrors;\n});\n\n/** @type {import(\"vue\").ComputedRef<String>} */\nconst title = computed(() => {\n  if (entry.value.hasErrors) {\n    return JSON.stringify(entry.value.errors[0], null, \" \");\n  }\n  if (entry.value.type === \"symlink\") {\n    return entry.value.pathTo;\n  }\n});\n\n/** @type {import(\"vue\").Ref<String>} */\nconst icon = computed(() => {\n  if (entry.value.type === \"folder\") {\n    return \"📁\";\n  } else if (entry.value.type === \"file\") {\n    if (isVideo(entry.value.name)) {\n      return \"🎦\";\n    } else if (isImage(entry.value.name)) {\n      return \"🖼\";\n    }\n    return \"📄\";\n  } else if (entry.value.type === \"symlink\") {\n    return \"🔗\";\n  }\n  return \"👾\";\n});\n\nfunction onClick(event) {\n  if (entry.value.type === \"folder\") {\n    console.log(\"openFolder\", entry.value);\n    openFolder(entry.value);\n  } else {\n    console.log(entry.value);\n  }\n}\n\n/** @param {MouseEvent} event */\nfunction onMousedown(event) {\n  const MIDDLE_BUTTON = 1;\n  const RIGHT_BUTTON = 2;\n  if (event.button === MIDDLE_BUTTON) {\n    event.preventDefault();\n    console.log(\n        entry.value,\n        [...meta.value.path,...entry.value.path.map(e => e.name)].join(separator.value).replace(\"//\", \"/\")\n    );\n  }\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.row {\n  width: 100%;\n  &:hover {\n    background-color: var(--blue-2);\n  }\n  * {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n  td {\n    max-width: 0; // no scroll for long names\n    &.icon {\n      border-left: 2px solid transparent;\n      width: 2.5%;\n      min-width: 22px;\n      user-select: none;\n    }\n    &.name {\n      width: 100%;\n      white-space: pre; // to display tailing spaces\n    }\n    &.type {\n      min-width: 58px;\n      user-select: none;\n    }\n  }\n  &.error {\n    .icon {\n      border-left: 2px solid red;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"content\"\n       @contextmenu=\"onContextMenu\"\n  >\n    <table class=\"rows\" v-if=\"listLimited.length\">\n      <Row v-for=\"entry of listLimited\" :entry=\"entry\"/>\n    </table>\n    <div class=\"empty-message\" v-if=\"empty && !error\">\n      <span>The folder is empty.</span>\n    </div>\n    <div class=\"error-message\" v-if=\"error\">\n      <div>\n        <h2>Error</h2>\n        <table>\n          <tr>\n            <td>syscall</td>\n            <td><pre>{{error.syscall}}</pre></td>\n          </tr>\n          <tr>\n            <td>code</td>\n            <td><pre>{{error.code}}</pre></td>\n          </tr>\n          <tr>\n            <td>errno</td>\n            <td><pre>{{error.errno}}</pre></td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport Row from \"./Row.vue\";\nimport {goBack, empty, openedFolder} from \"../core/folders.js\";\nimport {listLimited} from \"../core/entries.js\";\nimport {computed} from \"vue\";\n\n/** @type {ComputedRef<ScanError>} */\nconst error = computed(() => {\n  if (openedFolder.value.hasErrors) {\n    return openedFolder.value.errors[0];\n  }\n  return false;\n});\n\nfunction onContextMenu(event) {\n  event.preventDefault();\n  goBack();\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.content {\n  width: 100%;\n  overflow: auto;\n  .rows {\n    width: 100%;\n    overflow: auto;\n  }\n  .empty-message {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--gray-2);\n  }\n  .error-message {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    color: var(--red-1);\n    div {\n      h2 {\n        margin: 0;\n        padding-bottom: 6px;\n        padding-left: 2px;\n      }\n      pre {\n        display: inline;\n      }\n      td {\n        padding-right: 3px;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"main\">\n    <div        style=\"grid-area: switch;\"></div>\n    <AddressBar style=\"grid-area: address;\"/>\n    <Search     style=\"grid-area: search;\"/>\n    <Tabs       style=\"grid-area: tabs;\"/>\n    <Content    style=\"grid-area: content;\"/>\n    <Status     style=\"grid-area: status;\"/>\n    <Debug      style=\"grid-area: debug;\"/>\n  </div>\n</template>\n\n<script setup>\nimport AddressBar from \"./AddressBar.vue\";\nimport Search from \"./Search.vue\";\nimport Tabs from \"./Tabs.vue\";\nimport Content from \"./Content.vue\";\nimport Status from \"./Status.vue\";\nimport Debug from \"./Debug.vue\";\nimport {onMounted} from \"vue\";\nimport {setScan} from \"../core/folders.js\";\n\n\n// Already opened directory, no need to open with input\nonMounted(async () => {\n  //todo search\n  const filepath = new URL(location.href).searchParams.get(\"filepath\");\n  if (filepath) {\n    /** @type {Response} */\n    const response = await fetch(filepath);\n    return setScan(response);\n  }\n});\n\n</script>\n\n<style lang=\"scss\" scoped>\n.main {\n  grid-template-areas: \"switch address search \"\n                       \"tabs   content content\"\n                       \"status status  status \"\n                       \"debug  debug   debug  \";\n\n  display: grid;\n  grid-template-columns: 7em 2fr 1fr;\n  grid-template-rows:    2em 1fr;\n\n  height: 720px;\n  max-height: 100vh;\n  width: 1280px;\n  max-width: 100%;\n  box-sizing: border-box;\n\n  grid-gap: 1px;\n  border: 1px solid var(--gray-2);\n  background-color: var(--gray-2);\n  * {\n    background-color: white;\n  }\n}\n</style>\n","import {createApp} from \"vue\";\nimport App from \"./App.vue\";\n\ncreateApp(App).mount(\"#app\");\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","setImmediate","globalThis","port1","port2","MessageChannel","queue","onmessage","shift","callback","postMessage","push","ms","Promise","resolve","setTimeout","videoExtensions","imageExtensions","dateValue","utc","_date","Date","str","toString","padStart","_utc","year","month","date","Number","warn","pad","sort","ref","compare","Intl","Collator","numeric","sensitivity","pre","cur","value","name","entries","computed","openedFolder","folders","comparator","files","symlinks","fifos","charDevs","blockDevs","sockets","list","search","length","searchResult","listLimited","slice","count","debugMessage","message","entryTypes","constructor","entry","parent","size","_size","mtime","btime","errors","pathTo","content","addChild","this","children","addHardlinks","entries2","total","hardlinks","hardlinksTotal","filter","e","Boolean","root","path","async","sEntries","map","Map","hidMap","get","pid","simpleEntry","SimpleEntry","set","id","hid","array","log","time","i","simpleEntries","timeNow","now","sleep","totalLinks","split","forEach","then","console","timeEnd","folderDummy","result","markRaw","defineProperty","performSearchDebounced","runnable","timerId","apply","arguments","debounce","performSearch","folder","request","folderRaw","isReactive","toRaw","time1","performance","search2","startsWith","findAll","includes","word","match","groups","searcher","toFixed","time2","sortedResult","predicate","res","partSize","list2","folderEntry","takePart","listAllEntries","curTime","watch","newValue","oldValue","pakoIsLoaded","src","onload","setAttribute","querySelector","append","appendScript","input","loadPako","inflator","pako","Inflate","ab","arrayBuffer","err","error","msg","JSON","parse","TextDecoder","decode","contentType","meta","scanMeta","rootEntry","flatScan","Response","response","headers","isGZip","unGZipJSON","isJSON","json","Blob","blob","text","meta2","root2","parseFlatScan","parseScan","separator","scanRootPath","openedFolders","unref","empty","isEmpty","scanDate","dateToDayDateString","title","platform","o","Object","k","v","count2","Math","trunc","repeat","join","commonFiles","doString","unusualFiles","additional","part1","part2","showSep","index","toRefs","props","isLast","event","setScan","target","hasErrors","stringify","icon","filename","ext","isVideo","isImage","button","preventDefault","replace","filepath","URL","location","searchParams","fetch","createApp","mount"],"mappings":"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"}